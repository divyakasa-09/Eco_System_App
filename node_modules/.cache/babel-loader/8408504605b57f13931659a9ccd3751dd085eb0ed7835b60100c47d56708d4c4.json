{"ast":null,"code":"var _jsxFileName = \"/Users/divyakasa/Desktop/Project_X/Eco_Explorer_App/eco-globe/src/components/EarthGlobe.js\",\n  _s = $RefreshSig$();\n// src/components/EarthGlobe.js\nimport React, { useRef } from 'react';\nimport { useLoader, useFrame } from '@react-three/fiber';\nimport { TextureLoader } from 'three';\nimport * as THREE from 'three';\nimport { Html } from '@react-three/drei';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EarthGlobe = ({\n  onSelectEcosystem,\n  ecosystems\n}) => {\n  _s();\n  const earthRef = useRef();\n  const pointsRef = useRef();\n  const earthTexture = useLoader(TextureLoader, '/textures/earth.jpg');\n\n  // Configure texture\n  earthTexture.wrapS = earthTexture.wrapT = THREE.RepeatWrapping;\n  earthTexture.flipY = false;\n  useFrame(() => {\n    if (earthRef.current) {\n      earthRef.current.rotation.y += 0.001;\n    }\n    if (pointsRef.current) {\n      pointsRef.current.rotation.y += 0.001; // Rotate points with earth\n    }\n  });\n\n  // Convert latitude and longitude to Cartesian coordinates\n  const calculatePosition = (latitude, longitude, radius) => {\n    // Convert to radians\n    const lat = latitude * (Math.PI / 180);\n    const lng = -longitude * (Math.PI / 180);\n    const x = radius * Math.cos(lat) * Math.sin(lng);\n    const y = radius * Math.sin(lat);\n    const z = radius * Math.cos(lat) * Math.cos(lng);\n    return [x, y, z];\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      ref: earthRef,\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [2, 64, 64]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n        map: earthTexture,\n        bumpMap: earthTexture,\n        bumpScale: 0.05,\n        specularMap: earthTexture,\n        specular: new THREE.Color('grey'),\n        shininess: 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [2.1, 64, 64]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n        color: \"#1c4a8c\",\n        transparent: true,\n        opacity: 0.1,\n        side: THREE.BackSide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"group\", {\n      ref: pointsRef,\n      children: ecosystems.map((eco, index) => {\n        const position = calculatePosition(eco.coordinates[0],\n        // latitude\n        eco.coordinates[1],\n        // longitude\n        2.05 // slightly larger than earth radius\n        );\n        return /*#__PURE__*/_jsxDEV(\"group\", {\n          position: position,\n          children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n            children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n              args: [0.02, 16, 16]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n              color: eco.color\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n            children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n              args: [0.03, 16, 16]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n              color: eco.color,\n              transparent: true,\n              opacity: 0.3\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"group\", {\n            onClick: () => onSelectEcosystem(eco),\n            children: /*#__PURE__*/_jsxDEV(Html, {\n              position: [0, 0, 0],\n              style: {\n                pointerEvents: 'auto',\n                userSelect: 'none'\n              },\n              center: true,\n              distanceFactor: 8,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"w-4 h-4 rounded-full cursor-pointer transform hover:scale-150 transition-transform duration-200\",\n                style: {\n                  backgroundColor: eco.color,\n                  boxShadow: `0 0 10px ${eco.color}`,\n                  border: '2px solid white'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(EarthGlobe, \"KELVrx+vtvKYqnABA/2MJ0B2Yzw=\", false, function () {\n  return [useLoader, useFrame];\n});\n_c = EarthGlobe;\nexport default EarthGlobe;\nvar _c;\n$RefreshReg$(_c, \"EarthGlobe\");","map":{"version":3,"names":["React","useRef","useLoader","useFrame","TextureLoader","THREE","Html","jsxDEV","_jsxDEV","EarthGlobe","onSelectEcosystem","ecosystems","_s","earthRef","pointsRef","earthTexture","wrapS","wrapT","RepeatWrapping","flipY","current","rotation","y","calculatePosition","latitude","longitude","radius","lat","Math","PI","lng","x","cos","sin","z","children","ref","args","fileName","_jsxFileName","lineNumber","columnNumber","map","bumpMap","bumpScale","specularMap","specular","Color","shininess","color","transparent","opacity","side","BackSide","eco","index","position","coordinates","onClick","style","pointerEvents","userSelect","center","distanceFactor","className","backgroundColor","boxShadow","border","_c","$RefreshReg$"],"sources":["/Users/divyakasa/Desktop/Project_X/Eco_Explorer_App/eco-globe/src/components/EarthGlobe.js"],"sourcesContent":["// src/components/EarthGlobe.js\nimport React, { useRef } from 'react';\nimport { useLoader, useFrame } from '@react-three/fiber';\nimport { TextureLoader } from 'three';\nimport * as THREE from 'three';\nimport { Html } from '@react-three/drei';\n\nconst EarthGlobe = ({ onSelectEcosystem, ecosystems }) => {\n  const earthRef = useRef();\n  const pointsRef = useRef();\n  const earthTexture = useLoader(TextureLoader, '/textures/earth.jpg');\n\n  // Configure texture\n  earthTexture.wrapS = earthTexture.wrapT = THREE.RepeatWrapping;\n  earthTexture.flipY = false;\n\n  useFrame(() => {\n    if (earthRef.current) {\n      earthRef.current.rotation.y += 0.001;\n    }\n    if (pointsRef.current) {\n      pointsRef.current.rotation.y += 0.001; // Rotate points with earth\n    }\n  });\n\n  // Convert latitude and longitude to Cartesian coordinates\n  const calculatePosition = (latitude, longitude, radius) => {\n    // Convert to radians\n    const lat = latitude * (Math.PI / 180);\n    const lng = -longitude * (Math.PI / 180);\n\n    const x = radius * Math.cos(lat) * Math.sin(lng);\n    const y = radius * Math.sin(lat);\n    const z = radius * Math.cos(lat) * Math.cos(lng);\n\n    return [x, y, z];\n  };\n\n  return (\n    <group>\n      {/* Earth Sphere */}\n      <mesh ref={earthRef}>\n        <sphereGeometry args={[2, 64, 64]} />\n        <meshPhongMaterial \n          map={earthTexture}\n          bumpMap={earthTexture}\n          bumpScale={0.05}\n          specularMap={earthTexture}\n          specular={new THREE.Color('grey')}\n          shininess={5}\n        />\n      </mesh>\n\n      {/* Atmosphere */}\n      <mesh>\n        <sphereGeometry args={[2.1, 64, 64]} />\n        <meshPhongMaterial\n          color=\"#1c4a8c\"\n          transparent={true}\n          opacity={0.1}\n          side={THREE.BackSide}\n        />\n      </mesh>\n\n      {/* Points Container - Rotates with Earth */}\n      <group ref={pointsRef}>\n        {ecosystems.map((eco, index) => {\n          const position = calculatePosition(\n            eco.coordinates[0],  // latitude\n            eco.coordinates[1],  // longitude\n            2.05                 // slightly larger than earth radius\n          );\n\n          return (\n            <group key={index} position={position}>\n              {/* Point Marker */}\n              <mesh>\n                <sphereGeometry args={[0.02, 16, 16]} />\n                <meshBasicMaterial color={eco.color} />\n              </mesh>\n              \n              {/* Glow Effect */}\n              <mesh>\n                <sphereGeometry args={[0.03, 16, 16]} />\n                <meshBasicMaterial \n                  color={eco.color}\n                  transparent\n                  opacity={0.3}\n                />\n              </mesh>\n\n              {/* Clickable Area */}\n              <group onClick={() => onSelectEcosystem(eco)}>\n                <Html\n                  position={[0, 0, 0]}\n                  style={{\n                    pointerEvents: 'auto',\n                    userSelect: 'none'\n                  }}\n                  center\n                  distanceFactor={8}\n                >\n                  <div\n                    className=\"w-4 h-4 rounded-full cursor-pointer transform hover:scale-150 transition-transform duration-200\"\n                    style={{\n                      backgroundColor: eco.color,\n                      boxShadow: `0 0 10px ${eco.color}`,\n                      border: '2px solid white',\n                    }}\n                  />\n                </Html>\n              </group>\n            </group>\n          );\n        })}\n      </group>\n    </group>\n  );\n};\n\nexport default EarthGlobe;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}