{"ast":null,"code":"var _jsxFileName = \"/Users/divyakasa/Desktop/Project_X/Eco_Explorer_App/eco-globe/src/components/EarthGlobe.js\",\n  _s = $RefreshSig$();\n// src/components/EarthGlobe.js\nimport React, { useRef } from 'react';\nimport { useLoader, useFrame } from '@react-three/fiber';\nimport { TextureLoader } from 'three';\nimport EcosystemPoint from './EcosystemPoint';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EarthGlobe = ({\n  onSelectEcosystem,\n  ecosystems\n}) => {\n  _s();\n  const earthRef = useRef();\n  const earthTexture = useLoader(TextureLoader, '/textures/earth.jpg');\n  useFrame(() => {\n    if (earthRef.current) {\n      earthRef.current.rotation.y += 0.001;\n    }\n  });\n\n  // Convert latitude and longitude to 3D coordinates\n  const latLongToVector3 = (latitude, longitude, radius) => {\n    // Convert to radians\n    const lat = latitude * Math.PI / 180;\n    const long = longitude * Math.PI / 180;\n    const x = radius * Math.cos(lat) * Math.sin(long);\n    const y = radius * Math.sin(lat);\n    const z = radius * Math.cos(lat) * Math.cos(long);\n    return [x, y, z];\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      ref: earthRef,\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [2, 64, 64]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        map: earthTexture,\n        metalness: 0.1,\n        roughness: 0.8\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), ecosystems.map((eco, index) => {\n      // Convert coordinates to 3D position\n      const position = latLongToVector3(eco.coordinates[0],\n      // latitude\n      eco.coordinates[1],\n      // longitude\n      2.1 // slightly larger than sphere radius to place points above surface\n      );\n      return /*#__PURE__*/_jsxDEV(EcosystemPoint, {\n        position: position,\n        color: eco.color,\n        onClick: () => onSelectEcosystem(eco)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(EarthGlobe, \"MdpIymUS2kkRaFKgtM6ucYO0KTU=\", false, function () {\n  return [useLoader, useFrame];\n});\n_c = EarthGlobe;\nexport default EarthGlobe;\nvar _c;\n$RefreshReg$(_c, \"EarthGlobe\");","map":{"version":3,"names":["React","useRef","useLoader","useFrame","TextureLoader","EcosystemPoint","jsxDEV","_jsxDEV","EarthGlobe","onSelectEcosystem","ecosystems","_s","earthRef","earthTexture","current","rotation","y","latLongToVector3","latitude","longitude","radius","lat","Math","PI","long","x","cos","sin","z","children","ref","args","fileName","_jsxFileName","lineNumber","columnNumber","map","metalness","roughness","eco","index","position","coordinates","color","onClick","_c","$RefreshReg$"],"sources":["/Users/divyakasa/Desktop/Project_X/Eco_Explorer_App/eco-globe/src/components/EarthGlobe.js"],"sourcesContent":["// src/components/EarthGlobe.js\nimport React, { useRef } from 'react';\nimport { useLoader, useFrame } from '@react-three/fiber';\nimport { TextureLoader } from 'three';\nimport EcosystemPoint from './EcosystemPoint';\n\nconst EarthGlobe = ({ onSelectEcosystem, ecosystems }) => {\n  const earthRef = useRef();\n  const earthTexture = useLoader(TextureLoader, '/textures/earth.jpg');\n\n  useFrame(() => {\n    if (earthRef.current) {\n      earthRef.current.rotation.y += 0.001;\n    }\n  });\n\n  // Convert latitude and longitude to 3D coordinates\n  const latLongToVector3 = (latitude, longitude, radius) => {\n    // Convert to radians\n    const lat = (latitude * Math.PI) / 180;\n    const long = (longitude * Math.PI) / 180;\n\n    const x = radius * Math.cos(lat) * Math.sin(long);\n    const y = radius * Math.sin(lat);\n    const z = radius * Math.cos(lat) * Math.cos(long);\n\n    return [x, y, z];\n  };\n\n  return (\n    <group>\n      <mesh ref={earthRef}>\n        <sphereGeometry args={[2, 64, 64]} />\n        <meshStandardMaterial \n          map={earthTexture}\n          metalness={0.1}\n          roughness={0.8}\n        />\n      </mesh>\n\n      {ecosystems.map((eco, index) => {\n        // Convert coordinates to 3D position\n        const position = latLongToVector3(\n          eco.coordinates[0], // latitude\n          eco.coordinates[1], // longitude\n          2.1 // slightly larger than sphere radius to place points above surface\n        );\n\n        return (\n          <EcosystemPoint\n            key={index}\n            position={position}\n            color={eco.color}\n            onClick={() => onSelectEcosystem(eco)}\n          />\n        );\n      })}\n    </group>\n  );\n};\n\nexport default EarthGlobe;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}