{"ast":null,"code":"var _jsxFileName = \"/Users/divyakasa/Desktop/Project_X/Eco_Explorer_App/eco-globe/src/components/EarthGlobe.js\",\n  _s = $RefreshSig$();\n// components/EarthGlobe.js\nimport React, { useRef } from 'react';\nimport { useLoader, useFrame } from '@react-three/fiber';\nimport { TextureLoader } from 'three';\nimport * as THREE from 'three';\nimport EcosystemPoint from './EcosystemPoint';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EarthGlobe = ({\n  onSelectEcosystem,\n  ecosystems\n}) => {\n  _s();\n  const earthRef = useRef();\n  const earthTexture = useLoader(TextureLoader, '/textures/earth.jpg');\n  useFrame(() => {\n    earthRef.current.rotation.y += 0.001;\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      ref: earthRef,\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [2, 64, 64]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        map: earthTexture,\n        metalness: 0.1,\n        roughness: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), ecosystems.map((eco, index) => /*#__PURE__*/_jsxDEV(EcosystemPoint, {\n        position: eco.coordinates,\n        color: eco.color,\n        onClick: () => onSelectEcosystem(eco)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_s(EarthGlobe, \"MdpIymUS2kkRaFKgtM6ucYO0KTU=\", false, function () {\n  return [useLoader, useFrame];\n});\n_c = EarthGlobe;\nexport default EarthGlobe;\nvar _c;\n$RefreshReg$(_c, \"EarthGlobe\");","map":{"version":3,"names":["React","useRef","useLoader","useFrame","TextureLoader","THREE","EcosystemPoint","jsxDEV","_jsxDEV","EarthGlobe","onSelectEcosystem","ecosystems","_s","earthRef","earthTexture","current","rotation","y","children","ref","args","fileName","_jsxFileName","lineNumber","columnNumber","map","metalness","roughness","eco","index","position","coordinates","color","onClick","_c","$RefreshReg$"],"sources":["/Users/divyakasa/Desktop/Project_X/Eco_Explorer_App/eco-globe/src/components/EarthGlobe.js"],"sourcesContent":["// components/EarthGlobe.js\nimport React, { useRef } from 'react';\nimport { useLoader, useFrame } from '@react-three/fiber';\nimport { TextureLoader } from 'three';\nimport * as THREE from 'three';\nimport EcosystemPoint from './EcosystemPoint';\n\nconst EarthGlobe = ({ onSelectEcosystem, ecosystems }) => {\n  const earthRef = useRef();\n  const earthTexture = useLoader(TextureLoader, '/textures/earth.jpg');\n  \n  useFrame(() => {\n    earthRef.current.rotation.y += 0.001;\n  });\n\n  return (\n    <group>\n      <mesh ref={earthRef}>\n        <sphereGeometry args={[2, 64, 64]} />\n        <meshStandardMaterial \n          map={earthTexture}\n          metalness={0.1}\n          roughness={1}\n        />\n        \n        {ecosystems.map((eco, index) => (\n          <EcosystemPoint\n            key={index}\n            position={eco.coordinates}\n            color={eco.color}\n            onClick={() => onSelectEcosystem(eco)}\n          />\n        ))}\n      </mesh>\n    </group>\n  );\n};\n\nexport default EarthGlobe;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,oBAAoB;AACxD,SAASC,aAAa,QAAQ,OAAO;AACrC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,UAAU,GAAGA,CAAC;EAAEC,iBAAiB;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACxD,MAAMC,QAAQ,GAAGZ,MAAM,CAAC,CAAC;EACzB,MAAMa,YAAY,GAAGZ,SAAS,CAACE,aAAa,EAAE,qBAAqB,CAAC;EAEpED,QAAQ,CAAC,MAAM;IACbU,QAAQ,CAACE,OAAO,CAACC,QAAQ,CAACC,CAAC,IAAI,KAAK;EACtC,CAAC,CAAC;EAEF,oBACET,OAAA;IAAAU,QAAA,eACEV,OAAA;MAAMW,GAAG,EAAEN,QAAS;MAAAK,QAAA,gBAClBV,OAAA;QAAgBY,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACrChB,OAAA;QACEiB,GAAG,EAAEX,YAAa;QAClBY,SAAS,EAAE,GAAI;QACfC,SAAS,EAAE;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACd,CAAC,EAEDb,UAAU,CAACc,GAAG,CAAC,CAACG,GAAG,EAAEC,KAAK,kBACzBrB,OAAA,CAACF,cAAc;QAEbwB,QAAQ,EAAEF,GAAG,CAACG,WAAY;QAC1BC,KAAK,EAAEJ,GAAG,CAACI,KAAM;QACjBC,OAAO,EAAEA,CAAA,KAAMvB,iBAAiB,CAACkB,GAAG;MAAE,GAHjCC,KAAK;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIX,CACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEZ,CAAC;AAACZ,EAAA,CA7BIH,UAAU;EAAA,QAEOP,SAAS,EAE9BC,QAAQ;AAAA;AAAA+B,EAAA,GAJJzB,UAAU;AA+BhB,eAAeA,UAAU;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}