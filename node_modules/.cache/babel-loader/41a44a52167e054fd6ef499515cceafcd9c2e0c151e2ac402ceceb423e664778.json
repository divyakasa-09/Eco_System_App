{"ast":null,"code":"var _jsxFileName = \"/Users/divyakasa/Desktop/Project_X/Eco_Explorer_App/eco-globe/src/components/EarthGlobe.js\",\n  _s = $RefreshSig$();\n// src/components/EarthGlobe.js\nimport React, { useRef } from 'react';\nimport { useLoader, useFrame } from '@react-three/fiber';\nimport { TextureLoader } from 'three';\nimport * as THREE from 'three';\nimport EcosystemPoint from './EcosystemPoint';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EarthGlobe = ({\n  onSelectEcosystem,\n  ecosystems\n}) => {\n  _s();\n  const earthRef = useRef();\n  const earthTexture = useLoader(TextureLoader, '/textures/earth.jpg');\n\n  // Set texture wrapping and repeat\n  earthTexture.wrapS = earthTexture.wrapT = THREE.RepeatWrapping;\n  // Make sure texture is not flipped\n  earthTexture.flipY = false;\n  useFrame(() => {\n    if (earthRef.current) {\n      earthRef.current.rotation.y += 0.001;\n    }\n  });\n  const latLongToVector3 = (latitude, longitude, radius) => {\n    const phi = (90 - latitude) * (Math.PI / 180);\n    const theta = (longitude + 180) * (Math.PI / 180);\n    return [-radius * Math.sin(phi) * Math.cos(theta), radius * Math.cos(phi), radius * Math.sin(phi) * Math.sin(theta)];\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      ref: earthRef,\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [2, 64, 64]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n        map: earthTexture,\n        side: THREE.DoubleSide // Render both sides of the sphere\n        ,\n        bumpMap: earthTexture // Add some surface detail\n        ,\n        bumpScale: 0.05 // Subtle surface variation\n        ,\n        specularMap: earthTexture,\n        specular: new THREE.Color('grey'),\n        shininess: 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [2.1, 64, 64]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n        color: \"#1c4a8c\",\n        transparent: true,\n        opacity: 0.1,\n        side: THREE.BackSide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), ecosystems.map((eco, index) => {\n      const position = latLongToVector3(eco.coordinates[0], eco.coordinates[1], 2.1);\n      return /*#__PURE__*/_jsxDEV(EcosystemPoint, {\n        position: position,\n        color: eco.color,\n        onClick: () => onSelectEcosystem(eco)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(EarthGlobe, \"MdpIymUS2kkRaFKgtM6ucYO0KTU=\", false, function () {\n  return [useLoader, useFrame];\n});\n_c = EarthGlobe;\nexport default EarthGlobe;\nvar _c;\n$RefreshReg$(_c, \"EarthGlobe\");","map":{"version":3,"names":["React","useRef","useLoader","useFrame","TextureLoader","THREE","EcosystemPoint","jsxDEV","_jsxDEV","EarthGlobe","onSelectEcosystem","ecosystems","_s","earthRef","earthTexture","wrapS","wrapT","RepeatWrapping","flipY","current","rotation","y","latLongToVector3","latitude","longitude","radius","phi","Math","PI","theta","sin","cos","children","ref","args","fileName","_jsxFileName","lineNumber","columnNumber","map","side","DoubleSide","bumpMap","bumpScale","specularMap","specular","Color","shininess","color","transparent","opacity","BackSide","eco","index","position","coordinates","onClick","_c","$RefreshReg$"],"sources":["/Users/divyakasa/Desktop/Project_X/Eco_Explorer_App/eco-globe/src/components/EarthGlobe.js"],"sourcesContent":["// src/components/EarthGlobe.js\nimport React, { useRef } from 'react';\nimport { useLoader, useFrame } from '@react-three/fiber';\nimport { TextureLoader } from 'three';\nimport * as THREE from 'three';\nimport EcosystemPoint from './EcosystemPoint';\n\nconst EarthGlobe = ({ onSelectEcosystem, ecosystems }) => {\n  const earthRef = useRef();\n  const earthTexture = useLoader(TextureLoader, '/textures/earth.jpg');\n  \n  // Set texture wrapping and repeat\n  earthTexture.wrapS = earthTexture.wrapT = THREE.RepeatWrapping;\n  // Make sure texture is not flipped\n  earthTexture.flipY = false;\n  \n  useFrame(() => {\n    if (earthRef.current) {\n      earthRef.current.rotation.y += 0.001;\n    }\n  });\n\n  const latLongToVector3 = (latitude, longitude, radius) => {\n    const phi = (90 - latitude) * (Math.PI / 180);\n    const theta = (longitude + 180) * (Math.PI / 180);\n    \n    return [\n      -radius * Math.sin(phi) * Math.cos(theta),\n      radius * Math.cos(phi),\n      radius * Math.sin(phi) * Math.sin(theta)\n    ];\n  };\n\n  return (\n    <group>\n      <mesh ref={earthRef}>\n        <sphereGeometry args={[2, 64, 64]} />\n        <meshPhongMaterial \n          map={earthTexture}\n          side={THREE.DoubleSide}  // Render both sides of the sphere\n          bumpMap={earthTexture}   // Add some surface detail\n          bumpScale={0.05}         // Subtle surface variation\n          specularMap={earthTexture}\n          specular={new THREE.Color('grey')}\n          shininess={5}\n        />\n      </mesh>\n\n      {/* Atmosphere glow */}\n      <mesh>\n        <sphereGeometry args={[2.1, 64, 64]} />\n        <meshPhongMaterial\n          color=\"#1c4a8c\"\n          transparent={true}\n          opacity={0.1}\n          side={THREE.BackSide}\n        />\n      </mesh>\n\n      {ecosystems.map((eco, index) => {\n        const position = latLongToVector3(\n          eco.coordinates[0],\n          eco.coordinates[1],\n          2.1\n        );\n\n        return (\n          <EcosystemPoint\n            key={index}\n            position={position}\n            color={eco.color}\n            onClick={() => onSelectEcosystem(eco)}\n          />\n        );\n      })}\n    </group>\n  );\n};\n\nexport default EarthGlobe;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}