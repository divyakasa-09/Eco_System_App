{"ast":null,"code":"var _jsxFileName = \"/Users/divyakasa/Desktop/Project_X/Eco_Explorer_App/eco-globe/src/components/EarthGlobe.js\",\n  _s = $RefreshSig$();\n// src/components/EarthGlobe.js\nimport React, { useRef } from 'react';\nimport { useLoader, useFrame } from '@react-three/fiber';\nimport { TextureLoader } from 'three';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EarthGlobe = ({\n  onSelectEcosystem,\n  ecosystems\n}) => {\n  _s();\n  const earthRef = useRef();\n  const pointsRef = useRef();\n  const earthTexture = useLoader(TextureLoader, '/textures/earth.jpg');\n\n  // Configure texture\n  earthTexture.wrapS = THREE.RepeatWrapping;\n  earthTexture.wrapT = THREE.RepeatWrapping;\n  useFrame(() => {\n    if (earthRef.current) {\n      earthRef.current.rotation.y += 0.001;\n    }\n  });\n  const calculatePosition = (latitude, longitude, radius) => {\n    // Convert latitude and longitude to radians\n    const lat = latitude * Math.PI / 180;\n    const lng = -longitude * Math.PI / 180; // Negative for correct orientation\n\n    // Calculate position using spherical coordinates\n    const x = radius * Math.cos(lat) * Math.sin(lng);\n    const y = radius * Math.sin(lat);\n    const z = radius * Math.cos(lat) * Math.cos(lng);\n    return [x, y, z];\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      ref: earthRef,\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [2, 64, 64]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        map: earthTexture,\n        metalness: 0.1,\n        roughness: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), ecosystems.map((eco, index) => {\n        const [x, y, z] = calculatePosition(eco.coordinates[0], eco.coordinates[1], 2.01 // Slightly above earth's surface\n        );\n        return /*#__PURE__*/_jsxDEV(\"group\", {\n          position: [x, y, z],\n          children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n            onClick: e => {\n              e.stopPropagation();\n              onSelectEcosystem(eco);\n            },\n            onPointerOver: e => {\n              document.body.style.cursor = 'pointer';\n            },\n            onPointerOut: e => {\n              document.body.style.cursor = 'auto';\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n              args: [0.04, 16, 16]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n              color: eco.color,\n              transparent: true,\n              opacity: 0.8\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n            children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n              args: [0.06, 16, 16]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n              color: eco.color,\n              transparent: true,\n              opacity: 0.3\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n            children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n              args: [0.08, 16, 16]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n              color: eco.color,\n              transparent: true,\n              opacity: 0.1,\n              children: /*#__PURE__*/_jsxDEV(animated.opacity, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [2.1, 64, 64]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"#1B4F72\",\n        transparent: true,\n        opacity: 0.1,\n        side: THREE.BackSide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(EarthGlobe, \"KELVrx+vtvKYqnABA/2MJ0B2Yzw=\", false, function () {\n  return [useLoader, useFrame];\n});\n_c = EarthGlobe;\nexport default EarthGlobe;\nvar _c;\n$RefreshReg$(_c, \"EarthGlobe\");","map":{"version":3,"names":["React","useRef","useLoader","useFrame","TextureLoader","THREE","jsxDEV","_jsxDEV","EarthGlobe","onSelectEcosystem","ecosystems","_s","earthRef","pointsRef","earthTexture","wrapS","RepeatWrapping","wrapT","current","rotation","y","calculatePosition","latitude","longitude","radius","lat","Math","PI","lng","x","cos","sin","z","children","ref","args","fileName","_jsxFileName","lineNumber","columnNumber","map","metalness","roughness","eco","index","coordinates","position","onClick","e","stopPropagation","onPointerOver","document","body","style","cursor","onPointerOut","color","transparent","opacity","animated","side","BackSide","_c","$RefreshReg$"],"sources":["/Users/divyakasa/Desktop/Project_X/Eco_Explorer_App/eco-globe/src/components/EarthGlobe.js"],"sourcesContent":["// src/components/EarthGlobe.js\nimport React, { useRef } from 'react';\nimport { useLoader, useFrame } from '@react-three/fiber';\nimport { TextureLoader } from 'three';\nimport * as THREE from 'three';\n\nconst EarthGlobe = ({ onSelectEcosystem, ecosystems }) => {\n  const earthRef = useRef();\n  const pointsRef = useRef();\n  const earthTexture = useLoader(TextureLoader, '/textures/earth.jpg');\n\n  // Configure texture\n  earthTexture.wrapS = THREE.RepeatWrapping;\n  earthTexture.wrapT = THREE.RepeatWrapping;\n\n  useFrame(() => {\n    if (earthRef.current) {\n      earthRef.current.rotation.y += 0.001;\n    }\n  });\n\n  const calculatePosition = (latitude, longitude, radius) => {\n    // Convert latitude and longitude to radians\n    const lat = (latitude * Math.PI) / 180;\n    const lng = (-longitude * Math.PI) / 180; // Negative for correct orientation\n\n    // Calculate position using spherical coordinates\n    const x = radius * Math.cos(lat) * Math.sin(lng);\n    const y = radius * Math.sin(lat);\n    const z = radius * Math.cos(lat) * Math.cos(lng);\n\n    return [x, y, z];\n  };\n\n  return (\n    <group>\n      {/* Earth */}\n      <mesh ref={earthRef}>\n        <sphereGeometry args={[2, 64, 64]} />\n        <meshStandardMaterial \n          map={earthTexture}\n          metalness={0.1}\n          roughness={1}\n        />\n\n        {/* Points as part of the earth mesh to rotate with it */}\n        {ecosystems.map((eco, index) => {\n          const [x, y, z] = calculatePosition(\n            eco.coordinates[0],\n            eco.coordinates[1],\n            2.01 // Slightly above earth's surface\n          );\n\n          return (\n            <group key={index} position={[x, y, z]}>\n              {/* Point marker */}\n              <mesh\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onSelectEcosystem(eco);\n                }}\n                onPointerOver={(e) => {\n                  document.body.style.cursor = 'pointer';\n                }}\n                onPointerOut={(e) => {\n                  document.body.style.cursor = 'auto';\n                }}\n              >\n                {/* Point geometry */}\n                <sphereGeometry args={[0.04, 16, 16]} />\n                <meshBasicMaterial \n                  color={eco.color}\n                  transparent\n                  opacity={0.8}\n                />\n              </mesh>\n\n              {/* Glow effect */}\n              <mesh>\n                <sphereGeometry args={[0.06, 16, 16]} />\n                <meshBasicMaterial\n                  color={eco.color}\n                  transparent\n                  opacity={0.3}\n                />\n              </mesh>\n\n              {/* Optional: Pulse effect */}\n              <mesh>\n                <sphereGeometry args={[0.08, 16, 16]} />\n                <meshBasicMaterial\n                  color={eco.color}\n                  transparent\n                  opacity={0.1}\n                >\n                  <animated.opacity />\n                </meshBasicMaterial>\n              </mesh>\n            </group>\n          );\n        })}\n      </mesh>\n\n      {/* Optional: Atmosphere effect */}\n      <mesh>\n        <sphereGeometry args={[2.1, 64, 64]} />\n        <meshBasicMaterial\n          color=\"#1B4F72\"\n          transparent\n          opacity={0.1}\n          side={THREE.BackSide}\n        />\n      </mesh>\n    </group>\n  );\n};\n\nexport default EarthGlobe;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}