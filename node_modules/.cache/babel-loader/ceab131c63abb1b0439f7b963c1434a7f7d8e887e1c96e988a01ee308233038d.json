{"ast":null,"code":"var _jsxFileName = \"/Users/divyakasa/Desktop/Project_X/Eco_Explorer_App/eco-globe/src/components/EarthGlobe.js\",\n  _s = $RefreshSig$();\n// src/components/EarthGlobe.js\nimport React, { useRef } from 'react';\nimport { useLoader, useFrame } from '@react-three/fiber';\nimport { TextureLoader } from 'three';\nimport * as THREE from 'three';\nimport { Html } from '@react-three/drei';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EarthGlobe = ({\n  onSelectEcosystem,\n  ecosystems\n}) => {\n  _s();\n  const earthRef = useRef();\n  const pointsRef = useRef();\n  const earthTexture = useLoader(TextureLoader, '/textures/earth.jpg');\n\n  // Configure texture properly\n  earthTexture.wrapS = THREE.RepeatWrapping;\n  earthTexture.wrapT = THREE.RepeatWrapping;\n  earthTexture.repeat.set(1, 1);\n  earthTexture.minFilter = THREE.LinearFilter;\n  earthTexture.magFilter = THREE.LinearFilter;\n  useFrame(() => {\n    if (earthRef.current) {\n      earthRef.current.rotation.y += 0.001;\n    }\n    if (pointsRef.current) {\n      pointsRef.current.rotation.y += 0.001;\n    }\n  });\n  const calculatePosition = (latitude, longitude, radius) => {\n    const phi = (90 - latitude) * (Math.PI / 180);\n    const theta = (longitude + 180) * (Math.PI / 180);\n    return [-radius * Math.sin(phi) * Math.cos(theta), radius * Math.cos(phi), radius * Math.sin(phi) * Math.sin(theta)];\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      ref: earthRef,\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [2, 64, 64]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        map: earthTexture,\n        metalness: 0.1,\n        roughness: 1,\n        side: THREE.DoubleSide // This ensures both sides are visible\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"group\", {\n      ref: pointsRef,\n      children: ecosystems.map((eco, index) => {\n        const [x, y, z] = calculatePosition(eco.coordinates[0], eco.coordinates[1], 2.05);\n        return /*#__PURE__*/_jsxDEV(\"group\", {\n          position: [x, y, z],\n          onClick: e => {\n            e.stopPropagation();\n            onSelectEcosystem(eco);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n            children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n              args: [0.05, 16, 16]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n              color: eco.color\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(EarthGlobe, \"KELVrx+vtvKYqnABA/2MJ0B2Yzw=\", false, function () {\n  return [useLoader, useFrame];\n});\n_c = EarthGlobe;\nexport default EarthGlobe;\nvar _c;\n$RefreshReg$(_c, \"EarthGlobe\");","map":{"version":3,"names":["React","useRef","useLoader","useFrame","TextureLoader","THREE","Html","jsxDEV","_jsxDEV","EarthGlobe","onSelectEcosystem","ecosystems","_s","earthRef","pointsRef","earthTexture","wrapS","RepeatWrapping","wrapT","repeat","set","minFilter","LinearFilter","magFilter","current","rotation","y","calculatePosition","latitude","longitude","radius","phi","Math","PI","theta","sin","cos","children","ref","args","fileName","_jsxFileName","lineNumber","columnNumber","map","metalness","roughness","side","DoubleSide","eco","index","x","z","coordinates","position","onClick","e","stopPropagation","color","_c","$RefreshReg$"],"sources":["/Users/divyakasa/Desktop/Project_X/Eco_Explorer_App/eco-globe/src/components/EarthGlobe.js"],"sourcesContent":["// src/components/EarthGlobe.js\nimport React, { useRef } from 'react';\nimport { useLoader, useFrame } from '@react-three/fiber';\nimport { TextureLoader } from 'three';\nimport * as THREE from 'three';\nimport { Html } from '@react-three/drei';\n\nconst EarthGlobe = ({ onSelectEcosystem, ecosystems }) => {\n  const earthRef = useRef();\n  const pointsRef = useRef();\n  const earthTexture = useLoader(TextureLoader, '/textures/earth.jpg');\n\n  // Configure texture properly\n  earthTexture.wrapS = THREE.RepeatWrapping;\n  earthTexture.wrapT = THREE.RepeatWrapping;\n  earthTexture.repeat.set(1, 1);\n  earthTexture.minFilter = THREE.LinearFilter;\n  earthTexture.magFilter = THREE.LinearFilter;\n\n  useFrame(() => {\n    if (earthRef.current) {\n      earthRef.current.rotation.y += 0.001;\n    }\n    if (pointsRef.current) {\n      pointsRef.current.rotation.y += 0.001;\n    }\n  });\n\n  const calculatePosition = (latitude, longitude, radius) => {\n    const phi = (90 - latitude) * (Math.PI / 180);\n    const theta = (longitude + 180) * (Math.PI / 180);\n    \n    return [\n      -radius * Math.sin(phi) * Math.cos(theta),\n      radius * Math.cos(phi),\n      radius * Math.sin(phi) * Math.sin(theta)\n    ];\n  };\n\n  return (\n    <group>\n      {/* Earth Sphere */}\n      <mesh ref={earthRef}>\n        <sphereGeometry args={[2, 64, 64]} />\n        <meshStandardMaterial \n          map={earthTexture}\n          metalness={0.1}\n          roughness={1}\n          side={THREE.DoubleSide}  // This ensures both sides are visible\n        />\n      </mesh>\n\n      {/* Points Container */}\n      <group ref={pointsRef}>\n        {ecosystems.map((eco, index) => {\n          const [x, y, z] = calculatePosition(\n            eco.coordinates[0],\n            eco.coordinates[1],\n            2.05\n          );\n\n          return (\n            <group \n              key={index} \n              position={[x, y, z]}\n              onClick={(e) => {\n                e.stopPropagation();\n                onSelectEcosystem(eco);\n              }}\n            >\n              <mesh>\n                <sphereGeometry args={[0.05, 16, 16]} />\n                <meshBasicMaterial color={eco.color} />\n              </mesh>\n            </group>\n          );\n        })}\n      </group>\n    </group>\n  );\n};\n\nexport default EarthGlobe;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}