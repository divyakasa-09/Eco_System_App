{"ast":null,"code":"var _jsxFileName = \"/Users/divyakasa/Desktop/Project_X/Eco_Explorer_App/eco-globe/src/components/EarthGlobe.js\",\n  _s = $RefreshSig$();\n// src/components/EarthGlobe.js\nimport React, { useRef } from 'react';\nimport { useLoader, useFrame } from '@react-three/fiber';\nimport { TextureLoader } from 'three';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EarthGlobe = ({\n  onSelectEcosystem,\n  ecosystems\n}) => {\n  _s();\n  const earthRef = useRef();\n  const earthTexture = useLoader(TextureLoader, '/textures/earth.jpg');\n  earthTexture.wrapS = THREE.RepeatWrapping;\n  earthTexture.wrapT = THREE.RepeatWrapping;\n  useFrame(() => {\n    if (earthRef.current) {\n      earthRef.current.rotation.y += 0.001;\n    }\n  });\n\n  // Corrected coordinate calculation\n  const latLongToVector3 = (latitude, longitude, radius) => {\n    // Convert to radians\n    const latRad = latitude * (Math.PI / 180);\n    const lonRad = -longitude * (Math.PI / 180); // Negative for correct orientation\n\n    return [radius * Math.cos(latRad) * Math.cos(lonRad), radius * Math.sin(latRad), radius * Math.cos(latRad) * Math.sin(lonRad)];\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      ref: earthRef,\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [2, 64, 64]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        map: earthTexture,\n        metalness: 0.1,\n        roughness: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), ecosystems.map((eco, index) => {\n        const [x, y, z] = latLongToVector3(eco.coordinates[0],\n        // latitude\n        eco.coordinates[1],\n        // longitude\n        2.01 // slightly larger than Earth radius\n        );\n        return /*#__PURE__*/_jsxDEV(\"group\", {\n          position: [x, y, z],\n          children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n            onClick: e => {\n              e.stopPropagation();\n              onSelectEcosystem(eco);\n            },\n            onPointerOver: () => {\n              document.body.style.cursor = 'pointer';\n            },\n            onPointerOut: () => {\n              document.body.style.cursor = 'auto';\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n              args: [0.04, 16, 16]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n              color: eco.color,\n              transparent: true,\n              opacity: 0.8\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n            children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n              args: [0.06, 16, 16]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n              color: eco.color,\n              transparent: true,\n              opacity: 0.3\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [2.1, 64, 64]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"#1B4F72\",\n        transparent: true,\n        opacity: 0.1,\n        side: THREE.BackSide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(EarthGlobe, \"MdpIymUS2kkRaFKgtM6ucYO0KTU=\", false, function () {\n  return [useLoader, useFrame];\n});\n_c = EarthGlobe;\nexport default EarthGlobe;\nvar _c;\n$RefreshReg$(_c, \"EarthGlobe\");","map":{"version":3,"names":["React","useRef","useLoader","useFrame","TextureLoader","THREE","jsxDEV","_jsxDEV","EarthGlobe","onSelectEcosystem","ecosystems","_s","earthRef","earthTexture","wrapS","RepeatWrapping","wrapT","current","rotation","y","latLongToVector3","latitude","longitude","radius","latRad","Math","PI","lonRad","cos","sin","children","ref","args","fileName","_jsxFileName","lineNumber","columnNumber","map","metalness","roughness","eco","index","x","z","coordinates","position","onClick","e","stopPropagation","onPointerOver","document","body","style","cursor","onPointerOut","color","transparent","opacity","side","BackSide","_c","$RefreshReg$"],"sources":["/Users/divyakasa/Desktop/Project_X/Eco_Explorer_App/eco-globe/src/components/EarthGlobe.js"],"sourcesContent":["// src/components/EarthGlobe.js\nimport React, { useRef } from 'react';\nimport { useLoader, useFrame } from '@react-three/fiber';\nimport { TextureLoader } from 'three';\nimport * as THREE from 'three';\n\nconst EarthGlobe = ({ onSelectEcosystem, ecosystems }) => {\n  const earthRef = useRef();\n  const earthTexture = useLoader(TextureLoader, '/textures/earth.jpg');\n\n  earthTexture.wrapS = THREE.RepeatWrapping;\n  earthTexture.wrapT = THREE.RepeatWrapping;\n\n  useFrame(() => {\n    if (earthRef.current) {\n      earthRef.current.rotation.y += 0.001;\n    }\n  });\n\n  // Corrected coordinate calculation\n  const latLongToVector3 = (latitude, longitude, radius) => {\n    // Convert to radians\n    const latRad = latitude * (Math.PI / 180);\n    const lonRad = -longitude * (Math.PI / 180); // Negative for correct orientation\n    \n    return [\n      radius * Math.cos(latRad) * Math.cos(lonRad),\n      radius * Math.sin(latRad),\n      radius * Math.cos(latRad) * Math.sin(lonRad)\n    ];\n  };\n\n  return (\n    <group>\n      <mesh ref={earthRef}>\n        <sphereGeometry args={[2, 64, 64]} />\n        <meshStandardMaterial \n          map={earthTexture}\n          metalness={0.1}\n          roughness={1}\n        />\n\n        {ecosystems.map((eco, index) => {\n          const [x, y, z] = latLongToVector3(\n            eco.coordinates[0], // latitude\n            eco.coordinates[1], // longitude\n            2.01              // slightly larger than Earth radius\n          );\n\n          return (\n            <group key={index} position={[x, y, z]}>\n              <mesh\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onSelectEcosystem(eco);\n                }}\n                onPointerOver={() => {\n                  document.body.style.cursor = 'pointer';\n                }}\n                onPointerOut={() => {\n                  document.body.style.cursor = 'auto';\n                }}\n              >\n                <sphereGeometry args={[0.04, 16, 16]} />\n                <meshBasicMaterial \n                  color={eco.color}\n                  transparent\n                  opacity={0.8}\n                />\n              </mesh>\n              \n              {/* Glow effect */}\n              <mesh>\n                <sphereGeometry args={[0.06, 16, 16]} />\n                <meshBasicMaterial\n                  color={eco.color}\n                  transparent\n                  opacity={0.3}\n                />\n              </mesh>\n            </group>\n          );\n        })}\n      </mesh>\n\n      {/* Atmosphere */}\n      <mesh>\n        <sphereGeometry args={[2.1, 64, 64]} />\n        <meshBasicMaterial\n          color=\"#1B4F72\"\n          transparent\n          opacity={0.1}\n          side={THREE.BackSide}\n        />\n      </mesh>\n    </group>\n  );\n};\n\nexport default EarthGlobe;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}